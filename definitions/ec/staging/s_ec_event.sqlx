-- Config blocks
config {
    type: "view",
    schema: "df_molts_ga4_staging",
    description: "GA4ステージングデータ セッションデータを追加 EC用",
    tags: ["daily", "staging"],
    columns: {
        // timestamp
        event_date: "日付",
        event_timestamp: "タイムスタンプ（マイクロ秒）",
        event_timestamp_jst: "タイムスタンプ_日本時間",
        entrance_timestamp: "タイムスタンプ（セッション開始）（マイクロ秒）",
        entrance_timestamp_jst: "タイムスタンプ（セッション開始）_日本時間",
        exit_timestamp: "タイムスタンプ（離脱）（マイクロ秒）",
        exit_timestamp_jst: "タイムスタンプ（離脱）_日本時間",

        // event
        event_name: "イベント名",
        event_bundle_sequence_id: "これらのイベントをまとめたアップロード用バンドルのシーケンシャル ID",

        // ecommerce
        ecommerce: "ECデータ",
        items: "商品",

        // user
        user_id: "ユーザーID",
        user_pseudo_id: "ユニークユーザ識別用ID",

        // session
        ga_session_id: "セッションID",
        ga_session_number: "通算セッション数",

        // page
        hostname: "ホスト名",
        page_location: "URL",
        page_location_canonicalize: "正規化URL",
        page_title: "ページタイトル",
        screen_class: "スクリーンクラス（アプリ）",
        screen_name: "スクリーン名（アプリ）",

        // add_column
        is_fixed_data: "FIXしたデータか",

        // event index
        batch_page_id: "バッチの発生ページ順",
        batch_ordering_id: "バッチの発生順番",
        batch_event_index: "イベントの順番",
        unique_key: "イベントのユニーク化"

    }
}


-- Query blocks
-- 共通処理
WITH exclude_internal AS(

    SELECT
        *
    FROM
        ${ref("s_ec_events_union")}
    WHERE
        debug_mode IS NULL -- デバッグモードを除外
        AND debug_event IS NULL -- デバッグモードを除外
        AND traffic_type IS NULL -- 内部アクセスを除外
        AND (
            hostname IN (${constants.HOSTNAMES}) -- 計測対象ドメインを追加
            OR hostname LIKE '${constants.HOSTNAME_LIKE}'
            OR event_name IN ('${constants.MP_EVENT1}','${constants.MP_EVENT2}') -- Measurement Protocolなどhostnameがないケースに設定
            OR event_name LIKE '${constants.MP_EVENT_LIKE1}' -- Measurement Protocolなどhostnameがないケースに設定
        )

),
 ga AS (
    SELECT
        * ,
/*        COALESCE(batch_page_id,0) AS batch_page_id,
        COALESCE(batch_ordering_id,0) AS batch_ordering_id,
        COALESCE(batch_event_index,0) AS batch_event_index,
        -- イベント名による順番（表示系や自動的に発生するイベント＞クリックなどユーザーの行動によって発生するイベント）
        CASE WHEN event_name IN ('session_start') THEN 1
            WHEN event_name IN ('first_open','first_visit') THEN 2
            WHEN event_name IN ('page_view','screen_view') THEN 3
            WHEN event_name LIKE 'log%in%' THEN 4
            WHEN event_name LIKE 'log%out%' THEN 4
            WHEN event_name IN ('purcahse','refund') THEN 5
            WHEN event_name IN ('view_promotion','view_item','view_item_list','view_cart') THEN 6
            WHEN event_name LIKE 'view_%' THEN 7
            WHEN event_name IN ('begin_checkout','add_to_cart','remove_from_cart') THEN 8
            WHEN event_name LIKE "select_%" THEN 9
            WHEN event_name LIKE "add_%" THEN 10
            ELSE 1000 END AS event_index
*/   
 FROM
    exclude_internal
)

SELECT
    -- timestamp
    event_date,
    event_timestamp,
    event_timestamp_jst,

    -- event
    event_name,
    event_bundle_sequence_id,

    -- ecommerce
    ecommerce,
    items,

    -- user
    user_id,
    user_pseudo_id,

    -- session
    ga_session_id,
    ga_session_number,

    -- page
    hostname,
    page_location,
    page_location_canonicalize,
    page_title,
    screen_class,
    screen_name,

    -- add_column
    is_fixed_data,

    -- event index
    batch_page_id,
    batch_ordering_id,
    batch_event_index,
    unique_key,

FROM
    ga

