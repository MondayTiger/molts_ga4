-- Config blocks
config {
    type: "view",
    schema: constants.STAGING,
    description: "GA4ステージングデータ 不要イベントの追加・リネーム・削除。イベント順番の追加",
    tags: ["daily", "staging"],
}


-- Query blocks
WITH exclude_internal AS(
    SELECT
        *
    FROM
        ${ref("s_ga4_events_union")}
    WHERE
        debug_mode IS NULL -- デバッグモードを除外
        AND debug_event IS NULL -- デバッグモードを除外
        AND traffic_type IS NULL -- 内部アクセスを除外
        AND (
            hostname IN ('${constants.HOSTNAME1}','${constants.HOSTNAME2}') -- 計測対象ドメインを追加 
            OR event_name IN ('${constants.MP_EVENT1}','${constants.MP_EVENT2}') -- Measurement Protocolなどhostnameがないケースに設定
            OR event_name LIKE '${constants.MP_EVENT_LIKE1}' -- Measurement Protocolなどhostnameがないケースに設定
        )
), events AS(
    SELECT
        * EXCEPT(batch_page_id, batch_ordering_id, batch_event_index),
        COALESCE(batch_page_id,0) AS batch_page_id,
        COALESCE(batch_ordering_id,0) AS batch_ordering_id,
        COALESCE(batch_event_index,0) AS batch_event_index,
        -- イベント名による順番（表示系や自動的に発生するイベント＞クリックなどユーザーの行動によって発生するイベント）
        CASE WHEN event_name IN ('session_start') THEN 1
            WHEN event_name IN ('first_open','first_visit') THEN 2
            WHEN event_name IN ('page_view','screen_view') THEN 3
            WHEN event_name LIKE 'log%in%' THEN 4
            WHEN event_name LIKE 'log%out%' THEN 4
            WHEN event_name IN ('purcahse','refund') THEN 5
            WHEN event_name IN ('view_promotion','view_item','view_item_list','view_cart') THEN 6
            WHEN event_name LIKE 'view_%' THEN 7
            WHEN event_name IN ('begin_checkout','add_to_cart','remove_from_cart') THEN 8
            WHEN event_name LIKE "select_%" THEN 9
            WHEN event_name LIKE "add_%" THEN 10
            ELSE 1000 END AS event_index
    FROM
        exclude_internal
)
SELECT * 
FROM events

/**** 以下、処理を行う場合のサンプルコード ***

delete_event AS (
    SELECT
        *,
    FROM
        ${ref(constants.GA4_TABLE_STAGING)}
    WHERE
        event_name NOT IN ('event_name_here')
),

rename_event AS (
    SELECT
        *,
        CASE
            WHEN event_name = 'event_name_here' THEN 'new_event_name_here'
            ELSE event_name END AS event_name_new,
    FROM
        delete_event
),

ga_add_event AS (
    SELECT
        *,
        CASE
            WHEN event_name = 'event_name_here' THEN 'new_event_name_here'
            ELSE NULL END AS event_name_new,
    FROM
        delete_event
)

SELECT * FROM rename_event
UNION ALL
SELECT * FROM ga_add_event

*/